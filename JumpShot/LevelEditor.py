import pygame, sys, math, random, classes, write2file, read
from pygame.locals import *
from classes import *
from write2file import *
from read import *

WINDOWWIDTH = 1200
WINDOWHEIGHT = 800
TEXTCOLOR = (0, 0, 0)
BACKGROUNDCOLOR = (200, 200, 200)
MOUSEUP = 6
MOUSEDOWN = 5
scene = "game"
mousePressed = False
mouseX = 0
mouseY = 0
FPS = 60
pygame.init()
mainClock = pygame.time.Clock()
windowSurface = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))
pygame.display.set_caption('Jump Shot Level Editor')

keys = []
for i in range(100000):
 keys.append(False)

SPACE = 32
BACKSPACE = 8
ENTER = 13
PERIOD = 46
COMMA = 44
QUESTION = 47
EXCLAMATION = 49
LSHIFT = 304
RSHIFT = 303
QUOTE = 39
NUMPAD_LEFT = 260
NUMPAD_RIGHT = 262
NUMPAD_UP = 264
frameCount = 0

blockSize = 20

blocks = []
for i in range(round((WINDOWHEIGHT-100)/blockSize)):
    blocks.append([])
    for j in range(round(WINDOWWIDTH/blockSize)):
        if i == 0 or j == 0 or i == round((WINDOWHEIGHT-100)/blockSize)-1 or j == round(WINDOWWIDTH/blockSize)-1:
            blocks[len(blocks)-1].append(1)
        else:
            blocks[len(blocks)-1].append(0)

blocks = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 0, 5, 1, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 0, 0, 0, 5, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 0, 0, 0, 0, 0, 5, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 0, 2, 1, 1, 3, 0, 0, 5, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 0, 2, 1, 1, 1, 1, 3, 0, 0, 5, 1, 3, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 0, 2, 1, 4, 0, 0, 5, 1, 3, 0, 0, 5, 1, 3, 0, 0, 0, 0, 0, 2, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 2, 1, 4, 0, 0, 0, 0, 5, 1, 3, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 5, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 4, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]


aiMove = []
for i in range(round((WINDOWHEIGHT-100)/blockSize)):
    aiMove.append([])
    for j in range(round(WINDOWWIDTH/blockSize)):
        aiMove[len(aiMove)-1].append([])

aiMove = [[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], [2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3], [], [], [], [], [2, 2, 2, 2, 2, 2, 2, 2], [], [2, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3, 3], [], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [], [], [], [], [2, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [3, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2, 2, 2, 2], []], [[], [3, 3, 3, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 3, 3, 3, 3], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2, 2, 2], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 3, 3, 3, 3], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [3, 3, 3, 3, 3, 3, 3], [], [], [], [3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1], [], [], [], [2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2], [], [], [], [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], [], [], [], [], [3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2], [], [], [], [2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [], [], [], [2, 2, 2, 2, 2, 2, 2, 2], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 3, 3, 2, 2, 2, 2, 2], [], [], [], [], [], [], [], [], [], []], [[], [3, 3, 3, 3, 3, 3, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2, 2, 2, 2, 2], []], [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]]

def drawText(text, font, col, surface, x, y, **kwargs):
    angle = kwargs.get("angle", 0)
    textobj = pygame.transform.rotate(font.render(text, 1, col), angle)
    textrect = textobj.get_rect()
    textrect.center = (x, y)
    surface.blit(textobj, textrect)
def drawTextCorner(text, font, col, surface, x, y, **kwargs):
    angle = kwargs.get("angle", 0)
    textobj = pygame.transform.rotate(font.render(text, 1, col), angle)
    textrect = textobj.get_rect()
    textrect.topleft = (x, y)
    surface.blit(textobj, textrect)
def fontSize(size):
    return pygame.font.SysFont(None, size)

def keyListener():
    global mouseX
    global mouseY
    global keys
    global mousePressed
    global blockOn
    event = pygame.event.get()
    if len(event) > 0:
        for i in range(len(event)):
            if event[i].type == KEYDOWN:
                #print(event[i].key)
                keys[event[i].key] = True
                if event[i].key >= 49 and event[i].key <= 48 + len(types):
                    blockOn = event[i].key - 49
            elif event[i].type == KEYUP:
                keys[event[i].key] = False
            elif event[i].type == MOUSEDOWN:
                mousePressed = True
            elif event[i].type == MOUSEUP:
                mousePressed = False
            elif event[i].type == MOUSEMOTION:
                mouseX = event[i].pos[0]
                mouseY = event[i].pos[1]
            elif event[i].type == QUIT:
                pygame.quit()
                sys.exit()

#player = Player(100, 100, (0, 200, 230), 0)
blockOn = 1
aiOn = 1
types = ["Eraser", "Block", "Wedge1", "Wedge2", "Wedge3", "Wedge4"]
aiTypes = ["ERASER", "UP", "LEFT", "RIGHT"]

def arrow(x, y, length, WIDTH, direction):
    if direction == "UP":
        pygame.draw.polygon(windowSurface, (0,0,0), ((x, y), (x+WIDTH, y+WIDTH), (x+WIDTH/2, y+WIDTH), (x+WIDTH/2, y+length), (x-WIDTH/2, y+length), (x-WIDTH/2, y+WIDTH), (x-WIDTH, y+WIDTH))), 
    if direction == "LEFT":
        pygame.draw.polygon(windowSurface, (0,0,0), ((x, y), (x+WIDTH, y+WIDTH), (x+WIDTH, y+WIDTH/2), (x+length, y+WIDTH/2), (x+length, y-WIDTH/2), (x+WIDTH, y-WIDTH/2), (x+WIDTH, y-WIDTH))),  
    if direction == "RIGHT":
        pygame.draw.polygon(windowSurface, (0,0,0), ((x, y), (x-WIDTH, y+WIDTH), (x-WIDTH, y+WIDTH/2), (x-length, y+WIDTH/2), (x-length, y-WIDTH/2), (x-WIDTH, y-WIDTH/2), (x-WIDTH, y-WIDTH))), 

while True:
    frameCount += 1;
    keyListener()
    windowSurface.fill(BACKGROUNDCOLOR)
    for i in range(round((WINDOWHEIGHT-100)/blockSize)):
        pygame.draw.line(windowSurface, (180,180,180), (0, i*blockSize), (WINDOWWIDTH, i*blockSize))
    for i in range(round(WINDOWWIDTH/blockSize)):
        pygame.draw.line(windowSurface, (180,180,180), (i*blockSize, 0), (i*blockSize, WINDOWHEIGHT-100))
    for col in range(len(blocks)):
        for row in range(len(blocks[col])):
            if blocks[col][row] == 1:
                pygame.draw.rect(windowSurface, (100,100,100), (row*blockSize, col*blockSize, blockSize, blockSize))
            elif blocks[col][row] == 2:
                pygame.draw.polygon(windowSurface, (100,100,100), ((row*blockSize+blockSize, col*blockSize), (row*blockSize+blockSize, col*blockSize+blockSize), (row*blockSize,col*blockSize+blockSize)))
            elif blocks[col][row] == 3:
                pygame.draw.polygon(windowSurface, (100,100,100), ((row*blockSize, col*blockSize), (row*blockSize+blockSize, col*blockSize+blockSize), (row*blockSize,col*blockSize+blockSize)))
            elif blocks[col][row] == 4:
                pygame.draw.polygon(windowSurface, (100,100,100), ((row*blockSize, col*blockSize), (row*blockSize+blockSize, col*blockSize), (row*blockSize,col*blockSize+blockSize)))
            elif blocks[col][row] == 5:
                pygame.draw.polygon(windowSurface, (100,100,100), ((row*blockSize+blockSize, col*blockSize), (row*blockSize+blockSize, col*blockSize+blockSize), (row*blockSize,col*blockSize)))
    for col in range(len(aiMove)):
        for row in range(len(aiMove[col])):
            if len(aiMove[col][row]) > 0:
                pygame.draw.rect(windowSurface, (200,0,0), (row*blockSize, col*blockSize, blockSize, blockSize))
                for move in aiMove[col][row]:
                    if move == 1:
                        arrow(row*blockSize+blockSize/2, col*blockSize, blockSize/2, blockSize/6, "UP")
                    if move == 2:
                        arrow(row*blockSize, col*blockSize+blockSize/2, blockSize/2, blockSize/6, "LEFT")
                    if move == 3:
                        arrow(row*blockSize+blockSize, col*blockSize+blockSize/2, blockSize/2, blockSize/6, "RIGHT")
    for i in range(len(types)):
        if blockOn == i:
            pygame.draw.rect(windowSurface, (150,150,150), (i*75+20, WINDOWHEIGHT-80, 60, 60))
        else:
            pygame.draw.rect(windowSurface, (150,150,150), (i*75+25, WINDOWHEIGHT-75, 50, 50))
        if types[i] == "Block":
            pygame.draw.rect(windowSurface, (100,100,100), (i*75+35, WINDOWHEIGHT-65, 30, 30))
        elif types[i] == "Wedge1":
            pygame.draw.polygon(windowSurface, (100,100,100), ((i*75+65, WINDOWHEIGHT-65), (i*75+65, WINDOWHEIGHT-35), (i*75+35, WINDOWHEIGHT-35)))
        elif types[i] == "Wedge2":
            pygame.draw.polygon(windowSurface, (100,100,100), ((i*75+35, WINDOWHEIGHT-65), (i*75+65, WINDOWHEIGHT-35), (i*75+35, WINDOWHEIGHT-35)))
        elif types[i] == "Wedge3":
            pygame.draw.polygon(windowSurface, (100,100,100), ((i*75+65, WINDOWHEIGHT-65), (i*75+35, WINDOWHEIGHT-65), (i*75+35, WINDOWHEIGHT-35)))
        elif types[i] == "Wedge4":
            pygame.draw.polygon(windowSurface, (100,100,100), ((i*75+65, WINDOWHEIGHT-65), (i*75+65, WINDOWHEIGHT-35), (i*75+35, WINDOWHEIGHT-65)))
        if mousePressed and mouseX > i*75+25 and mouseX < i*75+75 and mouseY > WINDOWHEIGHT-75 and mouseY < WINDOWHEIGHT-25:
            blockOn = i
    for i in range(len(aiTypes)):
        if aiOn == i:
            pygame.draw.rect(windowSurface, (150,150,150), (WINDOWWIDTH-(i*75+80), WINDOWHEIGHT-80, 60, 60))
        else:
            pygame.draw.rect(windowSurface, (150,150,150), (WINDOWWIDTH-(i*75+75), WINDOWHEIGHT-75, 50, 50))
        if aiTypes[i] == "UP":
            arrow(WINDOWWIDTH-(i*75+50), WINDOWHEIGHT-65, 30, 10, "UP")
        elif aiTypes[i] == "RIGHT":
            arrow(WINDOWWIDTH-(i*75+35), WINDOWHEIGHT-50, 30, 10, "RIGHT")
        elif aiTypes[i] == "LEFT":
            arrow(WINDOWWIDTH-(i*75+65), WINDOWHEIGHT-50, 30, 10, "LEFT")
        if mousePressed and mouseX < WINDOWWIDTH-(i*75+25) and mouseX > WINDOWWIDTH-(i*75+75) and mouseY > WINDOWHEIGHT-75 and mouseY < WINDOWHEIGHT-25:
            aiOn = i
    #player.draw(windowSurface, LinkedList())
    #player.playPlayer(mousePressed, mouseX, mouseY, keys, blocks)
    if mousePressed and mouseY < WINDOWHEIGHT-100:
        blocks[math.floor(mouseY/blockSize)][math.floor(mouseX/blockSize)] = blockOn
    if keys[SPACE] and mouseY < WINDOWHEIGHT-100:
        keys[SPACE] = False
        if aiOn != 0:
            add = True
            for move in aiMove[math.floor(mouseY/blockSize)][math.floor(mouseX/blockSize)]:
                if move == aiOn:
                    add = False
                    break
            if add:
                aiMove[math.floor(mouseY/blockSize)][math.floor(mouseX/blockSize)].append(aiOn)
        else:
            for move in aiMove[math.floor(mouseY/blockSize)][math.floor(mouseX/blockSize)]:
                aiMove[math.floor(mouseY/blockSize)][math.floor(mouseX/blockSize)].remove(move)
    if keys[K_p]:
        keys[K_p] = False
        print(blocks)
    if keys[K_o]:
        keys[K_o] = False
        print(aiMove)
    mainClock.tick(FPS)
    pygame.display.update()
